import numpy as np
import pandas as pd

# DataFrame 생성
dates = pd.date_range('20130101', periods=6)
df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))

# 2. 데이터 확인하기
# DataFrame에서 인덱스를 확인하고 싶을 경우에는 .index, 컬럼은 .columns, 내부 데이터는 .values 속성을 통해 확인할 수 있다.
print(df.index)
# DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',
#                 '2013-01-05', '2013-01-06'],
#                 dtype='datetime64[ns]', freq='D')

print(df.columns)
# Index(['A', 'B', 'C', 'D'], dtype='object')

print(df.values)
# [[ 1.571507  0.160021 -0.015071 -0.118588]
#  [-1.037697 -0.891196  0.495447  0.453095]
#  [-1.682384 -0.026006 -0.152957 -0.212614]
#  [-0.108757 -0.958267  0.407331  0.187037]
#  [ 1.09238   2.841777 -0.125714 -0.760722]
#  [ 1.638509 -0.601126 -1.043931 -1.33095 ]]

# DataFrame의 describe()를 통해 각 컬럼의 통계적인 수치를 확인할 수 있다.
# 1. count: 데이터 개수
# 2. mean: 평균값
# 3. std: 표준편차
# 4. min: 최솟값
# 5. 25%: 1사분위값
# 6. 50%: 중앙값
# 7. 75%: 3사분위값
# 8. max: 최댓값

print(df.describe())
#               A         B         C         D
# count  6.000000  6.000000  6.000000  6.000000
# mean   0.245593  0.087534 -0.072482 -0.297124
# std    1.407466  1.423367  0.549378  0.651149
# min   -1.682384 -0.958267 -1.043931 -1.330950
# 25%   -0.805462 -0.818679 -0.146146 -0.623695
# 50%    0.491811 -0.313566 -0.070392 -0.165601
# 75%    1.451725  0.113514  0.301730  0.110631
# max    1.638509  2.841777  0.495447  0.453095

# 분위수란?
# 1. 1사분위값: 누적 확률이 0.25가 되는 곳의 확률 변호
# 2. 2사분위값 : 누적 확률이 0.5가 되는 곳의 확률 변호
# 3. 3사분위값 : 누적 확률이 0.75가 되는 곳의 확률 변호

# .T 속성은 DataFrame에서 index와 column을 바꾼 형태의 DataFrame이다.
print(df.T)
#    2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06
# A    1.571507   -1.037697   -1.682384   -0.108757    1.092380    1.638509
# B    0.160021   -0.891196   -0.026006   -0.958267    2.841777   -0.601126
# C   -0.015071    0.495447   -0.152957    0.407331   -0.125714   -1.043931
# D   -0.118588    0.453095   -0.212614    0.187037   -0.760722   -1.330950

# .sort_index()라는 메소드를 활용해 행과 열 이름을 정렬하여 나타낼 수도 있다.
# axis: 축 기준 정보 (0: 인덱스 기준, 1: 컬럼 기준)
# ascending: 정렬 방식 (False: 내림차순, True: 오름차순)
print(df.sort_index(axis=1, ascending=False))
df.sort_index(axis=1, ascending=False)
#                    D         C         B         A
# 2013-01-01 -1.135632 -1.509059 -0.282863  0.469112
# 2013-01-02 -1.044236  0.119209 -0.173215  1.212112
# 2013-01-03  1.071804 -0.494929 -2.104569 -0.861849
# 2013-01-04  0.271860 -1.039575 -0.706771  0.721555
# 2013-01-05 -1.087401  0.276232  0.567020 -0.424972
# 2013-01-06  0.524988 -1.478427  0.113648 -0.673690

print(df.sort_values(by='B'))
#                    A         B         C         D
# 2013-01-03 -0.861849 -2.104569 -0.494929  1.071804
# 2013-01-04  0.721555 -0.706771 -1.039575  0.271860
# 2013-01-01  0.469112 -0.282863 -1.509059 -1.135632
# 2013-01-02  1.212112 -0.173215  0.119209 -1.044236
# 2013-01-06 -0.673690  0.113648 -1.478427  0.524988
# 2013-01-05 -0.424972  0.567020  0.276232 -1.087401