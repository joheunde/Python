import numpy as np
import pandas as pd

# DataFrame 생성
dates = pd.date_range('20130101', periods=6)
df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))

# 3. 데이터 선택하기
# 데이터프레임 자체가 갖고 있는 인덱싱&슬라이싱 기능을 이용할 수 있다.
# 특정 컬럼의 값들만 가져오고 싶다면 df['A'](df.A와 동일)와 같은 형태로 입력한다. 리턴되는 값은 Series의 자료구조를 갖고 있다.
# 단, 컬럼의 이름이 간혹 df.A로 쓰면 에러가 나는 경우가 발생하기 때문에 df['A']를 권장한다.
print(df['A'])
# 2013-01-01    0.469112
# 2013-01-02    1.212112
# 2013-01-03   -0.861849
# 2013-01-04    0.721555
# 2013-01-05   -0.424972
# 2013-01-06   -0.673690
# req: D, Name: A, dtype: float64

print(type(df['A']))
# <class 'pandas.core.series.Series'>


# 특정 '행 범위'를 가져오고 싶다면 다음과 같이 리스트를 슬라이싱 할 때와 같이 동일하게 사용할 수 있다.
# df[0:3]라고 하면 0, 1, 2번째 행을 가져온다.
# 또 다른 방법으로 df['20130102':'20130104'] 인덱스명을 직접 넣어서 해당하는 행 범위를 가져올 수도 있다.
## 맨 처음 3개의 행
print(df[0:3])
#                    A         B         C         D
# 2013-01-01  0.469112 -0.282863 -1.509059 -1.135632
# 2013-01-02  1.212112 -0.173215  0.119209 -1.044236
# 2013-01-03 -0.861849 -2.104569 -0.494929  1.071804

## 인덱스명에 해당하는 값
print(df['20130102':'20130104'])
#                    A         B         C         D
# 2013-01-02  1.212112 -0.173215  0.119209 -1.044236
# 2013-01-03 -0.861849 -2.104569 -0.494929  1.071804
# 2013-01-04  0.721555 -0.706771 -1.039575  0.271860


# 이름을 이용하여 선택하기: .loc
# 이름(Label)로 가져오는 것은 DataFrame의 .loc 속성을 이용한다.
# .loc은 2차원으로 구성되어 있다. .loc[인덱스명, 컬럼명] 형식으로 접근가능하다.
# .loc[인덱스명]으로 입력하면 모든 행의 값으로 결과가 나온다. 여기에서는 .loc[인덱스명,:]과 동일한 의미이며, :의 경우 모든 값을 의마한다.
# .loc[선택 인덱스 리스트, 선택 컬럼 리스트]와 같은 리스트 형식으로 멀티인덱싱이 가능하다.
print(df.loc[dates[0]])
# A    1.571507
# B    0.160021
# C   -0.015071
# D   -0.118588
# Name: 2013-01-01 00:00:00, dtype: float64

print(df.loc[:, ['A', 'B']])
#                    A         B
# 2013-01-01  1.571507  0.160021
# 2013-01-02 -1.037697 -0.891196
# 2013-01-03 -1.682384 -0.026006
# 2013-01-04 -0.108757 -0.958267
# 2013-01-05  1.092380  2.841777
# 2013-01-06  1.638509 -0.601126

print(df.loc['20130102':'20130104', ['A', 'B']])
#                    A         B
# 2013-01-02 -1.037697 -0.891196
# 2013-01-03 -1.682384 -0.026006
# 2013-01-04 -0.108757 -0.958267

print(df.loc['20130102',['A','B']])
# A   -1.037697
# B   -0.891196
# Name: 2013-01-02 00:00:00, dtype: float64

print(df.loc[dates[0], 'A'])
# 1.571506676720408


# 인덱스로 데이터 가져오기: .iloc
# 여기서 말하는 인덱스는 위치(숫자) 정보를 말한다.
# .iloc도 .loc와 마찬가지로 2차원 형태로 구성되어 있어 1번째 인덱스는 행의 번호를, 2번째 인덱스는 컬럼의 번호를 의미한다. 멀티인덱싱도 가능
print(df.iloc[3])
# A   -0.108757
# B   -0.958267
# C    0.407331
# D    0.187037
# Name: 2013-01-04 00:00:00, dtype: float64

print(df.iloc[3:5, 0:2])
#                    A         B
# 2013-01-04 -0.108757 -0.958267
# 2013-01-05  1.092380  2.841777

print(df.iloc[[1, 2, 4], [0, 2]])
#                    A         C
# 2013-01-02 -1.037697  0.495447
# 2013-01-03 -1.682384 -0.152957
# 2013-01-05  1.092380 -0.125714

print(df.iloc[1:3, :])
#                    A         B         C         D
# 2013-01-02 -1.037697 -0.891196  0.495447  0.453095
# 2013-01-03 -1.682384 -0.026006 -0.152957 -0.212614

print(df.iloc[:, 1:3])
#                    B         C
# 2013-01-01  0.160021 -0.015071
# 2013-01-02 -0.891196  0.495447
# 2013-01-03 -0.026006 -0.152957
# 2013-01-04 -0.958267  0.407331
# 2013-01-05  2.841777 -0.125714
# 2013-01-06 -0.601126 -1.043931

# .iat의 경우 .iloc와 동일한 값을 가져 올 수 있다. 동일하지만 스칼라값을 가져오는 속도가 .iat이 빠르다.
print(df.iloc[1, 1])
# -0.89119558600132898

print(df.iat[1, 1])
# -0.89119558600132898


# 조건으로 가져오기
# 하나의 컬럼의 다양한 조건에 따라 행들을 선택할 수 있다.
print(df[df['A'] > 0])
#                    A         B         C         D
# 2013-01-01  1.571507  0.160021 -0.015071 -0.118588
# 2013-01-05  1.092380  2.841777 -0.125714 -0.760722
# 2013-01-06  1.638509 -0.601126 -1.043931 -1.330950

# DataFrame의 값 조건에 해당하는 것만 선택할 수도 있다.
print(df[df > 0])
#                    A         B         C         D
# 2013-01-01       NaN  0.986320       NaN       NaN
# 2013-01-02  0.195716       NaN  0.156280  1.698133
# 2013-01-03       NaN  1.322361       NaN  0.368837
# 2013-01-04  0.971131  0.739747  1.264288  0.750092
# 2013-01-05  1.499902  1.001231       NaN       NaN
# 2013-01-06       NaN       NaN  1.297538  0.300394


# isin 함수
# isin()을 이용하여 필터링을 할수 있다.
# 열이 list의 값들을 포함하고 있는 모든 행들을 골라낼 때 주로 사용한다.
# df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})
# print(df.isin([1, 3, 12, 'a']))
#        A      B
# 0   True   True
# 1  False  False
# 2   True  False

# 테이블 복사
df2 = df.copy()
# 새로운 컬럼 E에 값 추가
df2['E'] = ['one', 'one', 'two', 'three', 'four', 'three']
print(df2)
#                    A         B         C         D      E
# 2013-01-01  0.297280 -0.164435 -1.364004  1.370029    one
# 2013-01-02 -0.873679 -0.714744 -0.661736 -1.767130    one
# 2013-01-03  1.056333 -0.145556 -0.346682 -0.251119    two
# 2013-01-04 -0.180852  1.074488 -0.118013  0.339626  three
# 2013-01-05  0.243375 -0.356889  0.423735  0.093058   four
# 2013-01-06 -2.641442  0.144532  0.062179  0.560249  three

print(df2[df2['E'].isin(['two', 'four'])])
#                    A         B         C         D     E
# 2013-01-03  0.797834 -1.470937 -0.939409  0.362910   two
# 2013-01-05 -1.584979  3.217417  0.642078  1.151149  four


# 데이터 변경하기
# 데이터 프레임의 값들을 다른 값으로 변경할 수 있다.
# 기존 데이터 프레임에 새로운 열을 추가하고 싶을 때는 다음과 같이 같은 인덱스를 가진 시리즈나 리스트를 입력해준다.
s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range("20130102", periods=6))
print(s1)
# 2013-01-02    1
# 2013-01-03    2
# 2013-01-04    3
# 2013-01-05    4
# 2013-01-06    5
# 2013-01-07    6
# Freq: D, dtype: int64

df['F'] = s1
print(df)

# 0번째 인덱스, 'A' 컬럼을 0으로 변경
df.loc[dates[0], 'A'] = 0

# 0번째 인덱스, 1번째 컬럼을 0으로 변경
df.iloc[0, 1] = 0

# 전체 인덱스, 'D' 컬럼 데이터를 변경
df.loc[:, 'D'] = np.array([5] * len(df))

print(df)
#                    A         B         C    D    F
# 2013-01-01  0.000000  0.000000  0.707960  5.0  NaN
# 2013-01-02 -0.012494  0.978154  0.983119  5.0  1.0
# 2013-01-03 -0.042214 -1.150042  0.047019  5.0  2.0
# 2013-01-04  1.153040  0.482602 -1.445780  5.0  3.0
# 2013-01-05 -1.224204  1.035046  0.581183  5.0  4.0
# 2013-01-06  0.543404 -0.413005 -0.377913  5.0  5.0

# 조건문으로 선택하여 데이터를 변경할 수도 있다.
df2 = df.copy()

# 0보다 큰 데이터만 음수로 변경
df2[df2 > 0] = -df2
print(df2)
#                    A         B         C    D    F
# 2013-01-01  0.000000  0.000000 -1.285213 -5.0  NaN
# 2013-01-02 -1.099255 -1.942243 -0.019272 -5.0 -1.0
# 2013-01-03 -0.970119 -1.800297 -0.047426 -5.0 -2.0
# 2013-01-04 -0.209646 -0.264190 -0.462915 -5.0 -3.0
# 2013-01-05 -0.636422 -1.479921 -1.447672 -5.0 -4.0
# 2013-01-06 -0.499476 -0.746232 -0.030515 -5.0 -5.0